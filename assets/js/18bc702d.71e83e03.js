"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[270],{4076:e=>{e.exports=JSON.parse('{"functions":[{"name":"onStart","desc":"Registers all components and listens for new instances to be added\\nto the game.","params":[],"returns":[],"function_type":"method","ignore":true,"source":{"line":118,"path":"lib/components/init.luau"}},{"name":"onPostSimulation","desc":"Called before the simulation step, this will run all components\\nthat have the `onPreSimulation` lifecycle method.","params":[{"name":"dt","desc":"The delta time since the last simulation step.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":225,"path":"lib/components/init.luau"}},{"name":"onPreSimulation","desc":"Called before the simulation step, this will run all components\\nthat have the `onPreSimulation` lifecycle method.","params":[{"name":"dt","desc":"The delta time since the last simulation step.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":250,"path":"lib/components/init.luau"}},{"name":"onPreRender","desc":"Called before the render step, this will run all components\\nthat have the `onPreRender` lifecycle method.","params":[{"name":"dt","desc":"The delta time since the last render step.","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":275,"path":"lib/components/init.luau"}},{"name":"addComponent","desc":"Adds a component to an instance linked by the created object. This\\nwill register the component, start its lifecycles, bind callbacks to the\\nrequired listeners and setup their attributes and properties.\\n\\t\\n:::note\\nThis function can be called upon a component that is yet to be registered, though\\nit is not recommended. Best practice is to rely on `framework.createComponent`,\\nas it is guaranteed to initialize the component correctly.\\n\\nThis method should only be used for debugging purposes when isolating a single \\ncomponent.\\n:::","params":[{"name":"instance","desc":"The instance to add the component to.","lua_type":"Instance"},{"name":"ctor","desc":"The component\'s constructor.","lua_type":"ComponentConfig"}],"returns":[],"function_type":"method","source":{"line":311,"path":"lib/components/init.luau"}},{"name":"setupComponent","desc":"Setups a component, finally running its lifecycles and constructing it\\nwith the given instance.\\n\\nIn the most raw form, this function is responsible for setting up a component\\nand running its lifecycle methods. Can be used to quickly debug a component structure.\\n```lua title=\\"/lib/components/init.luau\\"\\nlocal frameworkComponents = require(...)\\nlocal component = {}\\n\\nfunction component:constructor()\\n\\tprint(\\"Hello, world!\\")\\nend\\n\\nfunction component:onStart()\\n\\tprint(\\"I have started!\\")\\nend\\n\\nframeworkComponents:setupComponent(<Instance>, { ... }, component, function()\\n\\tcomponent:constructor()\\nend)\\n```\\n\\n:::warning\\nYou should not call this function directly, instead, use `framework.createComponent`.\\n:::","params":[{"name":"instance","desc":"The instance to add the component to.","lua_type":"Instance"},{"name":"attributes","desc":"The attributes of the instance.","lua_type":"{ [string]: any }"},{"name":"component","desc":"The component to setup.","lua_type":"ComponentConfig"},{"name":"construct","desc":"The constructor of the component, sometimes this may be a deferred constructor.","lua_type":"() -> ()\\n"}],"returns":[],"function_type":"method","source":{"line":362,"path":"lib/components/init.luau"}},{"name":"getAttributes","desc":"Returns the attributes of an instance.","params":[{"name":"instance","desc":"The instance to get the attributes from.","lua_type":"Instance"},{"name":"ctor","desc":"The component\'s constructor.","lua_type":"any"}],"returns":[],"function_type":"method","ignore":true,"source":{"line":427,"path":"lib/components/init.luau"}},{"name":"removeComponent","desc":"Removes a component from an instance.","params":[{"name":"instance","desc":"The instance to remove the component from.","lua_type":"Instance"},{"name":"ctor","desc":"The component\'s constructor.","lua_type":"any"}],"returns":[],"function_type":"method","ignore":true,"source":{"line":450,"path":"lib/components/init.luau"}},{"name":"getComponent","desc":"Returns a component from an instance.","params":[{"name":"instance","desc":"The instance to get the component from.","lua_type":"Instance"},{"name":"ctor","desc":"The component\'s constructor.","lua_type":"any?"}],"returns":[],"function_type":"method","ignore":true,"source":{"line":482,"path":"lib/components/init.luau"}}],"properties":[],"types":[{"name":"ComponentConfig","desc":"The interface for a ComponentConfig. The initial state of a component.","fields":[{"name":"tag","lua_type":"string,","desc":""},{"name":"defaults?","lua_type":"{ [string]: any }?,","desc":""},{"name":"instanceGuard?","lua_type":"(instance: Instance) -> boolean,","desc":""},{"name":"ancestors","lua_type":"{ Instance }?,","desc":""},{"name":"ignoreFlags","lua_type":"boolean?","desc":""},{"name":"constructor?","lua_type":"() -> (),","desc":""},{"name":"onStart?","lua_type":"(singletonsBag: any) -> (),","desc":""},{"name":"onAttributeChanged?","lua_type":"(attribute: string, value: any) -> (),","desc":""},{"name":"onPostSimulation?","lua_type":"(dt: number) -> (),","desc":""},{"name":"onPreSimulation?","lua_type":"(dt: number) -> (),","desc":""},{"name":"onPreRender?","lua_type":"(dt: number) -> (),","desc":""}],"source":{"line":33,"path":"lib/components/init.luau"}},{"name":"Component","desc":"The interface for a Component.","fields":[{"name":"instance","lua_type":"Instance","desc":"The instance of the component."},{"name":"attributes","lua_type":"{ [string]: any }","desc":"The attributes of the component."}],"source":{"line":55,"path":"lib/components/init.luau"}}],"name":"Components","desc":"Manages all components in the game, listening for new instances to be added\\nand cleaning their references them when they are removed.\\n\\nComponents are a powerful tool to create modular and reusable code in your game,\\nwhich will depend on instances being added/removed.\\n\\nThey can also include lifecycles made by services, and also add lifecycles \\nthat could be used by other components or singletons in the game.\\n\\nThis is an example usage of components:\\n```lua title=\\"src/server/components/myComponent.luau\\"\\nlocal framework = require(\\"...\\")\\n\\nlocal component = {\\n\\ttag = \\"MyComponent\\",\\n}\\n\\nfunction component:constructor()\\n\\t...\\nend\\n\\nfunction component:onStart(singletonsBag)\\n\\t...\\nend\\n\\nfunction component:onAttributeChanged(attribute: string, value: any)\\n\\t...\\nend\\n\\nfunction component:onLifecycle(...)\\n\\t...\\nend\\n\\nreturn framework.createComponent(component)\\n```","source":{"line":99,"path":"lib/components/init.luau"}}')}}]);