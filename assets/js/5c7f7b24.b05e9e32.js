"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[925],{3332:e=>{e.exports=JSON.parse('{"functions":[{"name":"init","desc":"Initializes the library, allowing you to create services, controllers, and components. \\nThis stage is the most important, since it will be constructing services, controllers, and\\ncomponents based on the structure you\'ve defined.\\n\\n:::danger\\nThis method **MUST** be called before any other method in the library and only **ONCE** throughout\\nthe environment (server and client).\\n:::","params":[],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":98,"path":"lib/init.luau"}},{"name":"addPath","desc":"Adds a path where the library will look for services, controllers, and components. \\nThis method should be called before `Interactive.init()`.","params":[{"name":"path","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":110,"path":"lib/init.luau"}},{"name":"setLogLevel","desc":"Sets the log level of the Interactive framework. There\'s internal \\ndebugging and this function determinates how much debugging should be shown.","params":[{"name":"level","desc":"","lua_type":"\\"top-level\\" | \\"verbose\\""}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"static","source":{"line":122,"path":"lib/init.luau"}},{"name":"createService","desc":"Creates a service on the server.","params":[{"name":"config","desc":"","lua_type":"SingletonConfig"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":132,"path":"lib/init.luau"}},{"name":"createController","desc":"Creates a controller on the client.","params":[{"name":"config","desc":"","lua_type":"SingletonConfig"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":143,"path":"lib/init.luau"}},{"name":"getService","desc":"Returns a service by its name. This method should only be called by the server.","params":[{"name":"key","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":154,"path":"lib/init.luau"}},{"name":"getController","desc":"Returns a controller by its name.","params":[{"name":"key","desc":"","lua_type":"string"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":165,"path":"lib/init.luau"}},{"name":"createComponent","desc":"Creates a component based on the structure defined. Returns a component object.","params":[{"name":"component","desc":"","lua_type":"ComponentConfig"}],"returns":[{"desc":"","lua_type":"Component"}],"function_type":"static","source":{"line":176,"path":"lib/init.luau"}}],"properties":[{"name":"modding","desc":"Interactive also provides a way to interact with the modding utility.","lua_type":"Modding","source":{"line":186,"path":"lib/init.luau"}},{"name":"util","desc":"Interactive also provides a util library for common utility functions.","lua_type":"Utility","source":{"line":194,"path":"lib/init.luau"}}],"types":[],"name":"Interactive","desc":"Interactive is a library that allows you to create services, controllers, and components\\nin a modular way. It also provides a way to interact with the game\'s services and controllers\\nwithout having to worry about the implementation details. Everything done for you, and by you \\nat the same time!\\n\\nThere\'s some points to take in consideration:\\n- `Interactive.addPath()` must be called before Interactive.init() to add the paths where the library\\nwill look for services, controllers, and components.\\n\\n- `Interactive.init()` must be called before any other method, as it initializes the library.\\n\\n- `Interactive.createService()`, `Interactive.createController()`, and `Interactive.createComponent()`\\nare the methods used to create services, controllers, and components, respectively. All of these should\\nbe used after entirely defining singleton/component structure, as it will take the current structure of \\nthe object at the time of invoke.\\n\\nYou can also retrieve singletons (retrieving Components is not supported *yet*) by using\\n`Interactive.getService()` and `Interactive.getController()`, in the client and the server respectively.\\n\\nIf a dependency hasn\'t been resolved, it will be resolved at run-time when requiring the `getSingleton`\\nmethod. For example:\\n\\n```lua title=\\"src/server/services/service1.luau\\"\\nlocal service2 = {\\n\\tname = \\"Service2\\",\\n}\\n\\nfunction service2:method(...)\\n\\t...\\nend\\n```\\n```lua title=\\"src/server/services/service2.luau\\"\\nlocal service1 = {\\n\\tname = \\"Service1\\",\\n}\\n\\nfunction service1:onInit(servicesBag)\\n\\tself.service2 = servicesBag.getService(\\"Service2\\")\\n\\tself.service2:method()\\nend\\n```\\nIf `Service1` is resolved before `Service2`, it will be resolved at run-time when \\n`Service2` is required. So no need to worry about any dependency order if it\'s not\\nnecessary at its core.\\n\\nHere\'s an example on how to initialize the framework.\\n```lua title=\\"src/server/init.luau\\"\\nlocal Interactive = require(...)\\n\\nInteractive.addPath(\\"src/server/services\\")\\nInteractive.init()\\n```","source":{"line":81,"path":"lib/init.luau"}}')}}]);